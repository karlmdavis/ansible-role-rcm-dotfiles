---

# Get rcm_user's home directory (portably!)
- name: Get Home Directory for RCM User
  shell: echo ~{{ rcm_user }}
  register: rcm_user_home_shell
  changed_when: false
- name: Calculate Home Directory for RCM User
  set_fact:
    rcm_user_home: "{{ rcm_user_home_shell.stdout | trim }}"
- name: Get Group for RCM User
  command: id -gn
  register: rcm_user_group_command
  changed_when: false
- name: Calculate Group for RCM User
  set_fact:
    rcm_user_group: "{{ rcm_user_group_command.stdout | trim }}"

# Determine which installation and configuration mechanism to use.
- set_fact: rcm_install_tasks="{{ 'install_no_internet.yml' if rcm_install_mode == 'no_internet' else 'install_{0}.yml'.format(ansible_distribution) }}"
- include_tasks: "{{ rcm_install_tasks }}"

- name: Initialize Variable for Repo Cloning
  set_fact:
    repo_was_cloned: false

- include_tasks: clone_repo.yml
  with_items: "{{ rcm_repos }}"
  loop_control:
    loop_var: rcm_repo

- name: Check the .rcrc File
  stat:
    path: "{{ '{0}/.rcrc'.format(rcm_user_home) }}"
  register: stat_rcrc
  become: true
  become_user: "{{ rcm_user }}"
  changed_when: false

- name: Write Default .rcrc File
  template:
    src: 'templates/rcrc.j2'
    dest: "{{ '{0}/.rcrc'.format(rcm_user_home) }}"
    owner: "{{ rcm_user }}"
    group: "{{ rcm_user_group }}"
    mode: u=rx,g=rw,o=r
  become: true
  become_user: "{{ rcm_user }}"
  # Don't overwrite a `.rcrc` from one of the dotfiles repos.
  when: "stat_rcrc.stat.exists == false or stat_rcrc.stat.islnk == false"

- set_fact: rcup_bin="{{ '{0}/bin/rcup'.format(rcm_user_home) if rcm_install_mode == 'no_internet' else '/usr/bin/rcup' }}"
- set_fact: rcup_args="{{ '-f' if rcm_replace_existing_files == true else '' }}"
- name: Run rcup to Deploy Dotfiles
  command: "{{ rcup_bin }} {{ rcup_args }}"
  when: repo_was_cloned == true
  become: true
  become_user: "{{ rcm_user }}"
